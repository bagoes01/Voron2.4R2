#  Please refer to the wiki(https://github.com/nlef/moonraker-telegram-bot/wiki) for detailed information on how to configure the bot

[bot]
server: localhost
bot_token: 5682743451:AAExrQeL_ZvC3hLyY-Hc7DS5e-iMuBvhq30
chat_id: 5752638822

[camera]
host: http://localhost:8080/?action=stream
flip_vertically: true
flip_horizontally: true
video_duration: 5

[progress_notification]
#percent: 0
#height: 0
time: 60
groups: 211246197
group_only: false

# [timelapse]
# cleanup: true
# height: 2
# time: 0
# target_fps: 30

[timelapse]
#basedir: ~/moonraker-telegram-bot-timelapse
#	This sets the folder, where to save timelapse pictures and the resulting video. 
#	Default is '~/moonraker-telegram-bot-timelapse', but you can set it to any catalog, which the bot 
#	has rights to write to. Might be useful for saving the sd cards life by writing to external storage.
#	This value is not validated automatically.
#copy_finished_timelapse_dir: /home/pi/timelapse/finished
#	This sets the folder, to which finished timelapses get copied to. 
#	The default behaviour is not to copy it anywhere. This might be useful, if you want to keep only the videos, 
#	but clean up the pictures, or if you want to upload the videos to some network location.
#	This value is not validated automatically.
cleanup: true
#	Should the bot clean the catalog with pictures and video after the successful sending to the telegram chat.
#	Default is true. You might want to set it to false, if you intend on using the pictures later.
#	This value should be boolean.
height: 0
#	The bot can take timelapse pictures based on the z axis height (e.g. 0.2). The default is not to take pictures based on height.
#	This value should be an float >=0.0.
time: 0
#	The bot can take timelapse pictures based on time intervals in seconds. 
#	The default is not to take pictures based on time intervals.
#	This value should be an integer >=0.
target_fps: 30  
#	This is the target fps of the created video. The larger this number, the "faster" the timelapse will be.
#	15 fps equals 15 images per second lapsing. The default is 15 fps.
#	This value should be an integer >0.
min_lapse_duration: 1
#	On short prints, or with limited lapse pictures available, the lapse often gets to short to meaningfully display
#	the printing progress. You can specify the desired minimum duration of the created timelapse 
#	(not including last_frame_duration). This means, that the fps will get reduced, if the lapse is shorter than this time.
#	The default is to omit this. 
#	This value should be an integer >0 and <max_lapse_duration
max_lapse_duration: 5
#	Similar to min_lapse_duration, if your lapse video gets too long to watch, you can specify a desired time, which
#	should not be exceeded. This means, that the fps will get increased, if the lapse is going to be longer than this time.
#	The default is to omit this. 
#	This value should be an integer >0 and >min_lapse_duration
last_frame_duration: 5
#	This allows you to prevent the timelapse video from ending too abruptly. You can choose a duration for which 
#	to loop the last picture taken.
#	Default is 5 seconds. 
#	This value should be an integer >=0.
#after_lapse_gcode: /my_macro
#	You can run a macro or a gcode (e.g /gcode %your gcode here%) after the bot finishes building the timelapse.
#	This may be useful, if you intend shutting down the printer, if you want to automatically start another print,
#	or if you want to do something with the video after its ready. 
#	This value is not validated automatically.
#send_finished_lapse: true
#	If you want to build the lapse, but do not want to send it, set this to false. Default is true.
#	This value should be boolean.
#manual_mode: false
#	If True, only commands from gcode will manage timelapse.
#	Default is false.
#	This value should be boolean.
#after_photo_gcode: 
#	You can enter any macro or gcode to be run after the "photo_and_gcode" command.
#	Default is not to run any gcode after the command.
#	This value is not validated automatically.

[status_message_content]
content: progress, height, filament_length, filament_weight, print_duration, eta, finish_time, m117_status, tgnotify_status, last_update_time
#	This controls the content of the status message. You can choose to delete specific information not relevant to you.
#	Most of those parameters are self-explanatory. m117_status leaves a line to display text from the M117 gcode.
#	tgnotify_status is used to display custom information by sending the corresponding G-Code command, refer to interacting_with_klipper.md
#	last_updated_time displays the time, when the status message content was last updated when using status_single_message.
#	Allowed values: progress, height, filament_length, filament_weight, print_duration, eta, finish_time, m117_status, tgnotify_status, last_update_time
#sensors: mcu, ..., ...
#	You can add temperature sensors, like the "mcu" sensor to be displayed in the status message. 
#	Enter the names from your klipper config, separated by commas.
#	Default is not to display any additional temperature sensors.
#	This value is not validated automatically.
#heaters: extruder, heater_bed
#	You can add heaters, like the extruder, or the bed to be displayed in the status message. 
#	Enter the names from your klipper config, separated by commas.
#	Default is not to display any additional heaters. 
#	This value is not validated automatically.
#fans: your_fan, your_fan2
#	You can add any fans you have in the clipper config to be displayed in the status message. 
#	Enter the names from your klipper config, separated by commas.
#	Default is not to display any additional fans.
#	This value is not validated automatically.
#moonraker_devices: light, psu
#	You can add moonraker power devices to be displayed on the status message.
#	Enter the names from your moonraker config, separated by commas.
#	Default is not to display any additional devices. 
#	This value is not validated automatically.